{"version":3,"sources":["components/WinnerReporter/WinnerReporter.module.css","components/BoardGround/BoardGround.module.css","containers/Board/Board.module.css","hoc/Layout/Layout.module.css","components/Instructions/Instructions.module.css","hoc/Auxiliary/Auxiliary.js","components/BoardGround/BoardGround.js","components/Spaces/Spaces.js","components/Movement/Movement.js","components/TurnPlayer/TurnPlayer.js","components/NaiveUser/NaiveUser.js","components/AiUser/AiUser.js","components/WinnerReporter/WinnerReporter.js","containers/Board/Board.js","components/Instructions/Instructions.js","hoc/Layout/Layout.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Aux","props","children","boardGround","symbol","className","classes","BoardGround","isGameOver","onClick","clicked","spaces","movement","moves","turnPlayer","naiveUser","score","aIUser","data-testid","winnerReporter","winnerSymbol","WinnerReporterActive","Content","Close","WinnerReporterInactive","Board","state","isAiUserTurn","isNaiveTurn","aIScore","naiveScore","playGround","naive","result","incomplete","tie","moveCount","board","i","length","j","setState","getResult","succession","line","repeat","winningLine","join","applyMove","move","row","column","getBestMove","copyBoard","copy","push","availableMoves","getAvailableMoves","availableMovesAndScores","newBoard","otherSymbol","array","rand","Math","floor","random","shuffleArray","sort","moveA","moveB","executeTurn","findWinnerHandler","player","k","naiveTurnHandler","winnerInfo","currentNaiveScore","winnerNaiveSymbol","aITurnHandler","undefined","currentAiScore","winnerAiSymbol","removeReporterHandler","this","uniqueKey","map","innerArr","field","key","WinnerReporter","Movement","Spaces","TurnPlayer","NaiveUser","AiUser","Component","instructions","Warning","layout","Layout","Instructions","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.29f65d92.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"WinnerReporterInactive\":\"WinnerReporter_WinnerReporterInactive__2szFo\",\"WinnerReporterActive\":\"WinnerReporter_WinnerReporterActive__1qRGQ\",\"Content\":\"WinnerReporter_Content__2eCvo\",\"Close\":\"WinnerReporter_Close__2ObNV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"BoardGround\":\"BoardGround_BoardGround__gCBsG\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Board\":\"Board_Board__2eUuJ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Layout\":\"Layout_Layout__2BpO9\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Warning\":\"Instructions_Warning__1-kqi\"};","const Aux = props => props.children;\n\nexport default Aux;","import React from 'react';\n\nimport classes from './BoardGround.module.css';\n\nconst boardGround = (props) => {\n    if(props.symbol !== \"\"){\n        return (<div className={classes.BoardGround}>\n         {props.symbol}\n        </div>);\n    }\n    if(props.isGameOver){\n      return (<div className={classes.BoardGround}>\n        {props.symbol}\n       </div>);\n    }\n    return (<div className={classes.BoardGround}\n      onClick={props.clicked}>\n        {props.symbol}\n        </div>);\n};\n\n\nexport default boardGround;","import React from 'react';\n\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\n\nconst spaces = () => (\n    <Aux>\n       &emsp;&emsp;&emsp;\n       &emsp;&emsp;&emsp;\n       &emsp;&emsp;&emsp;\n       &emsp;&emsp;&emsp;\n    </Aux>\n    );\n\n\nexport default spaces;","import React from 'react';\n\nconst movement = (props) => (\n  <label>\n    Move: <strong>{props.moves}</strong>\n  </label>\n);\n\nexport default movement;","import React from 'react';\n\nconst turnPlayer = (props) => (\n  <label>\n       Turn: <strong>You</strong> \n    </label>\n);\n\nexport default turnPlayer;","import React from 'react';\n\nconst naiveUser = (props) => (\n    <label> \n        You: <strong>{props.score}</strong>\n    </label>\n);\n\nexport default naiveUser;","import React from 'react';\n\nconst aIUser = props => (\n    <label data-testid=\"aIScore\">\n          AI user: <strong>{props.score}</strong>\n    </label>\n); \n\nexport default aIUser;","import React from 'react';\n\nimport classes from './WinnerReporter.module.css';\n\nconst winnerReporter = (props) => {\n    if(props.isGameOver){ \n        if(props.winnerSymbol === ''){\n            return (\n                <div className={classes.WinnerReporterActive}>\n                 <div className={classes.Content}>\n                  <span\n                   className={classes.Close}\n                   onClick={props.clicked}>\n                       &times;</span>\n                  <p>DRAW!</p>\n                 </div>\n               </div>\n            );\n        }\n        return (\n            <div className={classes.WinnerReporterActive}>\n             <div className={classes.Content}>\n              <span\n               className={classes.Close}\n               onClick={props.clicked}>\n                   &times;</span>\n              <p>{(props.winnerSymbol === 'O')? 'AI Won!': 'You Won!'}</p>\n             </div>\n           </div>\n        );\n    }\n    return (\n        <div className={classes.WinnerReporterInactive}>\n         <div className={classes.Content}>\n          <span className={classes.Close}>&times;</span>\n         <p>{(props.winnerSymbol === 'O')? 'AI Won!': 'You Won!'}</p>\n         </div>\n       </div>\n    );\n};\n\n\nexport default winnerReporter;","import React, { Component } from 'react';\n\nimport classes from './Board.module.css';\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\nimport BoardGround from '../../components/BoardGround/BoardGround';\nimport Spaces from '../../components/Spaces/Spaces';\nimport Movement from '../../components/Movement/Movement';\nimport TurnPlayer from '../../components/TurnPlayer/TurnPlayer';\nimport NaiveUser from '../../components/NaiveUser/NaiveUser';\nimport AiUser from '../../components/AiUser/AiUser';\nimport WinnerReporter from '../../components/WinnerReporter/WinnerReporter';\n\n\nclass Board extends Component{\n\n    state = {\n        isAiUserTurn: true,\n        isNaiveTurn: false,\n        isGameOver: false,\n        aIScore: 0,\n        naiveScore: 0,\n        winnerSymbol: '',\n        playGround:[\n            [\"\", \"\", \"\"],\n            [\"\", \"\", \"\"],\n            [\"\", \"\", \"\"]\n          ],\n        naive:{\n            symbol: 'X',\n        },\n        aIUser:{\n            symbol: 'O',\n        },\n        moves: 0,\n        result: {\n            incomplete: 0,\n            tie: 3,\n        },\n\n    };\n\n    moveCount = (board) => {\n\n        let moveCount = 0\n        for (let i = 0; i<board.length; i++){\n          for (let j = 0 ; j<board[i].length ; j++){\n            if (board[i][j]!=\"\"){\n              moveCount++\n            }\n          }\n        }\n        this.setState({moves: moveCount})\n        return moveCount\n      };\n\n     getResult = (board,symbol) => {\n\n        let result = this.state.result.incomplete\n        if (this.moveCount(board)<5){\n           return {result}\n        }\n  \n        const succession =  (line) => {\n          return (line === symbol.repeat(3))\n        }\n  \n        let line\n        let winningLine=[]\n  \n        for (let i = 0 ; i<3 ; i++){\n          line = board[i].join('')\n          if(succession(line)){\n            result = symbol;\n            winningLine = [[i,0], [i,1], [i,2]]\n            return {result, winningLine};\n          }\n        }\n  \n        for (let j=0 ; j<3; j++){\n          let column = [board[0][j],board[1][j],board[2][j]]\n          line = column.join('')\n          if(succession(line)){\n            result = symbol\n            winningLine = [[0,j], [1,j], [2,j]]\n            return {result, winningLine};\n          }\n        }\n  \n        let diag1 = [board[0][0],board[1][1],board[2][2]]\n        line = diag1.join('')\n        if(succession(line)){\n          result = symbol\n          winningLine = [[0,0], [1,1], [2,2]]\n          return {result, winningLine};\n        }\n  \n        let diag2 = [board[0][2],board[1][1],board[2][0]]\n        line = diag2.join('')\n        if(succession(line)){\n          result = symbol\n          winningLine = [[0,2], [1,1], [2,0]]\n          return {result, winningLine};\n        }\n\n        if (this.moveCount(board)==9){\n          result= this.state.result.tie;\n          return {result, winningLine}\n        }\n  \n        return {result}\n      };\n\n     applyMove = (board,move, symbol) => {\n        board[move.row][move.column]= symbol\n        return board\n      };\n\n     getBestMove = (board, symbol) => {\n        \n        const copyBoard = (board) => {\n          let copy = []\n           for (let row = 0 ; row<3 ; row++){\n            copy.push([])\n            for (let column = 0 ; column<3 ; column++){\n              copy[row][column] = board[row][column]\n            }\n          }\n          return copy\n        }\n    \n        const getAvailableMoves =  (board) => {\n          \n          let availableMoves = []\n          for (let row = 0 ; row<3 ; row++){\n            for (let column = 0 ; column<3 ; column++){\n              if (board[row][column]===\"\"){\n                availableMoves.push({row, column})\n              }\n            }\n          }\n          return availableMoves\n        }\n    \n        const shuffleArray =  (array) => {\n           \n            for (let i = array.length - 1; i > 0; i--) {\n                let rand = Math.floor(Math.random() * (i + 1));\n                [array[i], array[rand]]=[array[rand], array[i]]\n            }\n        }\n    \n        let availableMoves = getAvailableMoves(board)\n        let availableMovesAndScores = []\n    \n        for (let i=0 ; i<availableMoves.length ; i++){\n         \n          let move = availableMoves[i]\n          let newBoard = copyBoard(board)\n          newBoard = this.applyMove(newBoard,move, symbol)\n          let result = this.getResult(newBoard,symbol).result\n          \n          let score\n          if (result == this.state.result.tie) {score = 0}\n          else if (result == symbol) {\n            score = 1\n          }\n          else {\n            let otherSymbol = this.state.naive.symbol\n            let nextMove = this.getBestMove(newBoard, otherSymbol)\n            score = - (nextMove.score)\n          }\n          if(score === 1)\n            return {move, score}\n          availableMovesAndScores.push({move, score})\n        }\n    \n        shuffleArray(availableMovesAndScores)\n    \n        availableMovesAndScores.sort((moveA, moveB )=>{\n            return moveB.score - moveA.score\n          })\n        return availableMovesAndScores[0]\n      };\n      \n      executeTurn = (board, move, symbol) => {\n        if (board[move.row][move.column]!==\"\"){\n          return board\n        }\n    \n        this.applyMove(board,move,symbol)\n        let result = this.getResult(board, symbol).result\n\n      };\n\n      findWinnerHandler = (player) => {   \n        let result = true;\n        let winningLine = [];\n       for (let j = 0; j < 3; j++) {     \n         result = result && (this.state.playGround[j][j] == player);\n        } \n        if (result) {\n             return {\n                result: result,\n                player: player\n        };\n      }\n      result = true;\nfor (let j = 0; j < 3; j++) {  \n     result = result && (this.state.playGround[2-j][j] == player);\n}\n    if (result) {\n        return {\n            result: result,\n            player: player\n        };\n    }\nfor (let k = 0; k < 3; k++) {\n    result = true;\n    for (let j = 0; j < 3; j++) {     \n        result = result && (this.state.playGround[k][j] == player);\n    }\n    if (result) {\n        return  {\n            result: result,\n            player: player\n        };\n    }    \n    result = true;\n    for (let j = 0; j < 3; j++) {     \n        result = result && (this.state.playGround[j][k] == player);\n    }\n        if (result) {\n            return {\n                result: result,\n                player: player\n            };\n        } \n}\n     return false;\n    }\n    naiveTurnHandler = (row, column) => {\n      let symbol = this.state.naive.symbol;\n      this.executeTurn(this.state.playGround, {row, column}, symbol)\n      this.setState({isAiUserTurn: true, isNaiveTurn: false});\n      const winnerInfo = this.findWinnerHandler(this.state.naive.symbol);\n      if(winnerInfo.result){\n        const currentNaiveScore = this.state.naiveScore + 1;\n        const winnerNaiveSymbol = this.state.naive.symbol;\n        this.setState({isGameOver: true, naiveScore: currentNaiveScore, winnerSymbol: winnerNaiveSymbol });\n      }\n      if(!winnerInfo.result && this.state.moves === 8){\n        this.setState({winnerSymbol: '', isGameOver: true});\n      }\n      \n    };\n\n    aITurnHandler = () => {\n        let symbol = this.state.aIUser.symbol;\n        let result = this.getBestMove(this.state.playGround,symbol)\n        if(result!=undefined){\n          let move = result.move; \n          this.executeTurn(this.state.playGround, move, symbol)\n          const winnerInfo = this.findWinnerHandler(this.state.aIUser.symbol);\n          if(winnerInfo.result){\n            const currentAiScore = this.state.aIScore + 1;\n            const winnerAiSymbol = this.state.aIUser.symbol;\n            this.setState({isGameOver: true, aIScore: currentAiScore, winnerSymbol: winnerAiSymbol});\n          }\n          if(!winnerInfo.result && this.state.moves === 8){\n            this.setState({winnerSymbol: '', isGameOver: true});\n          }\n        }\n        \n    };\n\n    removeReporterHandler = () => {\n     const clearedBoard = [\n      [\"\", \"\", \"\"],\n      [\"\", \"\", \"\"],\n      [\"\", \"\", \"\"]\n    ];\n     this.setState({playGround: clearedBoard});\n     this.setState({isGameOver: false});\n     this.state.moves = 0;\n    }\n\n    render(){\n        if(this.state.isAiUserTurn){\n            this.aITurnHandler();\n            this.setState({isAiUserTurn: false, isNaiveTurn: true});    \n        }\n        let uniqueKey = 0;\n        const board = this.state.playGround.map((innerArr, row) => {\n                 return innerArr.map((field, column) => {\n                    uniqueKey++;\n                     return <BoardGround \n                     key={uniqueKey} \n                     symbol={field}\n                     isGameOver={this.state.isGameOver}\n                     clicked = {() => this.naiveTurnHandler(row, column)}\n                     />\n                 })  \n        });\n        return (\n            <Aux>\n               <WinnerReporter \n               isGameOver={ this.state.isGameOver}\n               winnerSymbol={this.state.winnerSymbol}\n               clicked={this.removeReporterHandler}\n               />\n                <header>\n                      <span>\n                        <Movement moves={this.state.moves}/>\n                        </span>\n                        <Spaces/>\n                      <span><TurnPlayer/></span>\n                 </header>\n                <main className={classes.Board}>\n                   {board}\n                </main>\n                <footer>\n                     <span>\n                       <NaiveUser score={this.state.naiveScore}/>\n                       </span>\n                        <Spaces/>\n                      <span>\n                        <AiUser score={this.state.aIScore}/>\n                        </span> \n                </footer>\n            </Aux>\n        );\n    };\n}\n\n\nexport default Board;","import React from 'react';\n\nimport Aux from '../../hoc/Auxiliary/Auxiliary';\nimport classes from './Instructions.module.css';\n\nconst instructions = (props) => {\n\n    return (\n        <Aux>\n             <h1>Tic Tac Toe Game</h1>\n             <p>Play with an AI player who wins and never loses</p>\n             <p>\n                 <label className={classes.Warning}>Note</label>: \n                 Keep in mind that You'll be using <strong>X</strong> symbol.\n             </p>\n        </Aux>\n    );\n}\n\nexport default instructions;","import React from 'react';\n\nimport classes from './Layout.module.css';\nimport Instructions from '../../components/Instructions/Instructions';\n\nconst layout = (props) => (\n    <div className={classes.Layout}>\n     <Instructions/>\n    {props.children}\n    </div>\n);\n\nexport default layout;","import React from 'react';\n\nimport Board from './containers/Board/Board';\nimport Layout from './hoc/Layout/Layout';\n\nfunction App() {\n  return (\n    <div>\n       <Layout>\n           <Board/>\n       </Layout>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}